<?xml version="1.0" encoding="UTF-8"?>
<!--

 This file is part of GtkSourceView

 Author: Sapphire Becker <guess@logicplace.com>
 Copyright (C) 2011 by Sapphire Becker <guess@logicplace.com>

 GtkSourceView is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.

 GtkSourceView is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-->
<!--
 TODO:
  If once-only or end-parent is ever supported for context-reference and
  context-to-be-included elements this can be updated to allow only one
  value in the doc, after a key, and between each comma in an array. Also
  I'd be able to add support for displaying an error for trailing commas.
-->
<language id="rustaman-json" name="RUSTAMAN_JSON" version="2.0" _section="Other">
 
  <styles>
    <style id="http-method"        _name="HTTP Method"           map-to="def:keyword"/>
    <style id="url"                _name="URL"                   map-to="def:builtin"/>
    <style id="http-version"       _name="HTTP Version"          map-to="def:comment"/>
    <style id="http-header-name"   _name="HTTP Header Name"      map-to="def:special-char"/>
    <style id="http-header-sep"    _name="HTTP Header separator" map-to="def:comment"/>
    <style id="http-header-value"  _name="HTTP Header Value"     map-to="def:preprocessor"/>
    <style id="template-var"       _name="Template var"          map-to="def:preprocessor"/>
    <style id="keyname"            _name="Key"                   map-to="def:constant"/>
    <style id="special-char"       _name="Escaped Character"     map-to="js:escape"/>
    <style id="string"             _name="String"                map-to="js:string"/>
    <style id="null-value"         _name="Null Value"            map-to="js:null-value"/>
    <style id="boolean"            _name="Boolean Value"         map-to="js:boolean"/>
    <style id="error"              _name="Error"                 map-to="def:error"/>
    <style id="decimal"            _name="Decimal"               map-to="def:decimal"/>
    <style id="float"              _name="Floating point number" map-to="def:floating-point"/>
  </styles>

  <definitions>

    <define-regex id="http-method-re">GET|POST|PUT|PATCH|HEAD|OPTIONS</define-regex>
    <define-regex id="url">https?://[^\s]+</define-regex>
    <define-regex id="http-header-name-re">^[A-Za-z0-9-]*</define-regex>
    <define-regex id="http-header-value-re">\S*</define-regex>
    <define-regex id="template-var-re">\{\{[^\}]+\}\}</define-regex>

    <context id="http-query">
      <match extended="true">
        (\%{http-method-re})
        \s+
        (\%{url}|\%{template-var-re}[\S]*)
        \s*
        (HTTP/[0-9.]+)*
      </match>
      <include>
        <context sub-pattern="1" style-ref="http-method"/>
        <context sub-pattern="2" style-ref="url"/>
        <context sub-pattern="3" style-ref="http-version"/>
      </include>
    </context>

    <context id="http-header">
      <match extended="true">
        (\%{http-header-name-re})
        (:\s*)
        (\%{http-header-value-re}|\%{template-var-re})
      </match>
      <include>
        <context sub-pattern="1" style-ref="http-header-name"/>
        <context sub-pattern="2" style-ref="http-header-sep"/>
        <context sub-pattern="3" style-ref="http-header-value"/>
      </include>
    </context>

    <context id="template-var" style-ref="template-var">
      <match extended="true">
        \%{template-var-re}
      </match>
    </context>

    <context id="json-array">
      <start>\[</start>
      <end>\]</end>
      <include>
        <context>
          <start></start>
          <end>,|\s*(?=\&#93;)</end>
            <include>
            <context ref="json-value"/>
          </include>
        </context>
      </include>
    </context>

    <context id="json-object">
      <start>\{</start>
      <end>\}</end>
      <include>
        <context ref="string" style-ref="keyname"/>
        <context>
          <start>:</start>
          <end>,|\s*(?=})</end>
          <include>
            <context sub-pattern="0" where="start" style-ref="keyname"/>
          </include>
        </context>
        <context ref="catchall"/>
      </include>
    </context>

    <context id="string" style-ref="string" end-at-line-end="true" class="string" class-disabled="no-spell-check">
      <start>"</start>
      <end>"</end>
      <include>
        <context id="valid-escape" style-ref="special-char">
          <match>\\(?:[ntrfb"\\/]|u[0-9a-fA-F]{4})</match>
        </context>
        <context id="invalid-escape" style-ref="error">
          <match>\\(?:x[0-9a-fA-F]{2}|[0-3]?[0-7]{1,2}|.)</match>
        </context>
        <context id="line-continue" style-ref="error">
          <start>\\$</start>
          <end>^</end>
        </context>
      </include>
    </context>

    <context id="decimal" style-ref="decimal">
      <match>-?(?:[1-9][0-9]*|0)(?![.eE])</match>
    </context>

    <context id="float" style-ref="float">
      <match>-?(?:[1-9][0-9]*|0)(?:\.[0-9]+)?(?:[eE][+\-]?[0-9]+)?</match>
    </context>

    <context id="catchall" style-ref="error" extend-parent="false">
      <match>\S</match>
    </context>

    <context id="json-value"><include>
      <context ref="json-object"/>
      <context ref="json-array"/>
      <context ref="string"/>
      <context ref="template-var"/>
      <context ref="decimal"/>
      <context ref="float"/>
      <context ref="js:null-value" style-ref="null-value"/>
      <context ref="js:boolean" style-ref="boolean"/>
      <!-- <context ref="catchall"/> -->
    </include></context>

    <context id="rustaman-json" class="no-spell-check">
      <include>
        <context ref="template-var"/>
        <context ref="def:shell-like-comment"/>
        <context ref="http-query"/>
        <context ref="http-header"/>
        <context ref="json-object"/>
        <context ref="json-array"/>
      </include>
    </context>
  </definitions>
</language>
